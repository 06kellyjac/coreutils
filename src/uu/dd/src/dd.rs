// This file is part of the uutils coreutils package.
//
// (c) Tyler Steele <tyler.steele@protonmail.com>
//
// For the full copyright and license information, please view the LICENSE
// file that was distributed with this source code.

// spell-checker:ignore (T0DO)

#[macro_use]
extern crate uucore;

use std::error::Error;
use std::fs::File;
use std::io::{
    self, Read, Write,
    BufWriter,
};
use std::sync::mpsc;
use std::thread;

const NAME: &str = "dd";
const SUMMARY: &str = "Copies, and optionally converts, file system resources.";
const LONG_HELP: &str = "TODO: This is where the long help string for dd goes!";

const RTN_SUCCESS: i32 = 0;
const RTN_FAILURE: i32 = 1;

// Conversion tables are just lookup tables.
// eg. The ASCII->EBCDIC table stores the EBCDIC code at the index
// obtained by treating the ASCII representation as a number.
type ConversionTable = [u8; 256];

const ascii_to_ebcdic: ConversionTable = [
    0x00, 0x01, 0x02, 0x03, 0x37, 0x2d, 0x2e, 0x2f, 0x16, 0x05, 0x25, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
    0x10, 0x11, 0x12, 0x13, 0x3c, 0x3d, 0x32, 0x26, 0x18, 0x19, 0x3f, 0x27, 0x1c, 0x1d, 0x1e, 0x1f,
    0x40, 0x5a, 0x7f, 0x7b, 0x5b, 0x6c, 0x50, 0x7d, 0x4d, 0x5d, 0x5c, 0x4e, 0x6b, 0x60, 0x4b, 0x61,
    0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0x7a, 0x5e, 0x4c, 0x7e, 0x6e, 0x6f,
    0x7c, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6,
    0xd7, 0xd8, 0xd9, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xad, 0xe0, 0xbd, 0x9a, 0x6d,
    0x79, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96,
    0x97, 0x98, 0x99, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xc0, 0x4f, 0xd0, 0x5f, 0x07,
    0x20, 0x21, 0x22, 0x23, 0x24, 0x15, 0x06, 0x17, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x09, 0x0a, 0x1b,
    0x30, 0x31, 0x1a, 0x33, 0x34, 0x35, 0x36, 0x08, 0x38, 0x39, 0x3a, 0x3b, 0x04, 0x14, 0x3e, 0xe1,
    0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
    0x58, 0x59, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75,
    0x76, 0x77, 0x78, 0x80, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x6a, 0x9b, 0x9c, 0x9d, 0x9e,
    0x9f, 0xa0, 0xaa, 0xab, 0xac, 0x4a, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7,
    0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xa1, 0xbe, 0xbf, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xda, 0xdb,
    0xdc, 0xdd, 0xde, 0xdf, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
];

const ascii_to_ibm: ConversionTable = [
    0x00, 0x01, 0x02, 0x03, 0x37, 0x2d, 0x2e, 0x2f, 0x16, 0x05, 0x25, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
    0x10, 0x11, 0x12, 0x13, 0x3c, 0x3d, 0x32, 0x26, 0x18, 0x19, 0x3f, 0x27, 0x1c, 0x1d, 0x1e, 0x1f,
    0x40, 0x5a, 0x7f, 0x7b, 0x5b, 0x6c, 0x50, 0x7d, 0x4d, 0x5d, 0x5c, 0x4e, 0x6b, 0x60, 0x4b, 0x61,
    0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0x7a, 0x5e, 0x4c, 0x7e, 0x6e, 0x6f,
    0x7c, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6,
    0xd7, 0xd8, 0xd9, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xad, 0xe0, 0xbd, 0x5f, 0x6d,
    0x79, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96,
    0x97, 0x98, 0x99, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xc0, 0x4f, 0xd0, 0xa1, 0x07,
    0x20, 0x21, 0x22, 0x23, 0x24, 0x15, 0x06, 0x17, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x09, 0x0a, 0x1b,
    0x30, 0x31, 0x1a, 0x33, 0x34, 0x35, 0x36, 0x08, 0x38, 0x39, 0x3a, 0x3b, 0x04, 0x14, 0x3e, 0xe1,
    0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
    0x58, 0x59, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75,
    0x76, 0x77, 0x78, 0x80, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e,
    0x9f, 0xa0, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7,
    0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xda, 0xdb,
    0xdc, 0xdd, 0xde, 0xdf, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
];

const ebcdic_to_ascii: ConversionTable = [
    0x00, 0x01, 0x02, 0x03, 0x9c, 0x09, 0x86, 0x7f, 0x97, 0x8d, 0x8e, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
    0x10, 0x11, 0x12, 0x13, 0x9d, 0x85, 0x08, 0x87, 0x18, 0x19, 0x92, 0x8f, 0x1c, 0x1d, 0x1e, 0x1f,
    0x80, 0x81, 0x82, 0x83, 0x84, 0x0a, 0x17, 0x1b, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x05, 0x06, 0x07,
    0x90, 0x91, 0x16, 0x93, 0x94, 0x95, 0x96, 0x04, 0x98, 0x99, 0x9a, 0x9b, 0x14, 0x15, 0x9e, 0x1a,
    0x20, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xd5, 0x2e, 0x3c, 0x28, 0x2b, 0x7c,
    0x26, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0x21, 0x24, 0x2a, 0x29, 0x3b, 0x7e,
    0x2d, 0x2f, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xcb, 0x2c, 0x25, 0x5f, 0x3e, 0x3f,
    0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0x60, 0x3a, 0x23, 0x40, 0x27, 0x3d, 0x22,
    0xc3, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9,
    0xca, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x5e, 0xcc, 0xcd, 0xce, 0xcf, 0xd0,
    0xd1, 0xe5, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0xd2, 0xd3, 0xd4, 0x5b, 0xd6, 0xd7,
    0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0x5d, 0xe6, 0xe7,
    0x7b, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed,
    0x7d, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3,
    0x5c, 0x9f, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9,
    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
];

const lcase_to_ucase: ConversionTable = [
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
    0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
    0x60, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
    0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
    0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
    0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
    0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
    0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
    0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
    0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
    0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
    0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,

];

const ucase_to_lcase: ConversionTable = [
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
    0x40, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
    0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
    0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
    0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
    0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
    0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
    0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
    0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
    0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
    0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
];

// ----- Datatypes -----
enum SrcStat
{
    Read(usize),
    EOF,
}

struct Input<R: Read>
{
    src: R,
    ibs: usize,
    output_progress: bool,
}

impl<R: Read> Read for Input<R>
{
    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize>
    {
        self.src.read(buf)
    }
}

impl<R: Read> Input<R>
{
    fn fill_n(&mut self, buf: &mut [u8], obs: usize) -> Result<SrcStat, Box<dyn Error>>
    {
        let ibs = self.ibs;
        let mut bytes_read = 0;

        for n in 0..(obs/ibs) {
            // fill an ibs-len slice from src
            let this_read = self.read(&mut buf[n*ibs..(n+1)*ibs])?;

            if this_read != 0 {
                bytes_read += this_read;
            } else {
                break;
            }
        }

        if bytes_read != 0 {
            Ok(SrcStat::Read(bytes_read))
        } else {
            Ok(SrcStat::EOF)
        }
    }
}

struct Output<W: Write>
{
    dst: W,
    obs: usize,
    conv_table: Option<ConversionTable>,
}

impl<W: Write> Write for Output<W>
{
    fn write(&mut self, buf: &[u8]) -> io::Result<usize>
    {
        if let Some(ct) = self.conv_table
        {
            let mut cbuf = vec![0; buf.len()];
           
            for (idx, byte) in buf.iter().enumerate()
            {
                cbuf[idx] = ct[*byte as usize]
            }

            self.dst.write(&cbuf)
        }
        else
        {
            self.dst.write(buf)
        }
    }

    fn flush(&mut self) -> io::Result<()>
    {
        self.dst.flush()
    }
}

// ----- Implementation -----
fn gen_prog_updater(rx: mpsc::Receiver<usize>) -> impl Fn() -> ()
{
    move || { // LAAAAMBDA!

        // TODO: Replace ?? with accurate info
        print!("\rProgress ({}/??)", 0);

        loop
        {
            match rx.recv()
            {
                Ok(wr_total) => {
                    print!("\rProgress ({}/??)", wr_total);
                },
                Err(_) => {
                    println!("");
                    break
                },
            }
        }
    }
}

fn dd<R: Read, W: Write>(mut i: Input<R>, mut o: Output<W>) -> Result<(usize, usize), Box<dyn Error>>
{
    let prog_tx = if i.output_progress {
        let (prog_tx, prog_rx) = mpsc::channel();
        thread::spawn(gen_prog_updater(prog_rx));

        Some(prog_tx)
    }
    else
    {
        None
    };


    let mut bytes_in  = 0;
    let mut bytes_out = 0;

    loop
    {
        let mut buf = vec![0xDD; o.obs];
        let r_len =
            match i.fill_n(&mut buf, o.obs)? {
                SrcStat::Read(len) =>
                {
                    bytes_in += len;
                    len
                },
                SrcStat::EOF =>
                    break,
        };

        let w_len = o.write(&buf[..r_len])?;
        o.flush()?;

        bytes_out += w_len;

        if let Some(prog_tx) = &prog_tx
        {
            prog_tx.send(bytes_out)?;
        }
    }

    Ok((bytes_in, bytes_out))
}

pub fn uumain(args: impl uucore::Args) -> i32
{
    // TODO: parse args

    let if_name = "foo.txt";
    let of_name = "bar.txt";
    let ibs = 512;
    let obs = 4096;

    let in_f = File::open(if_name)
        .expect("TODO: Handle this error in the project-specific way");

    let out_f = File::open(of_name)
        .expect("TODO: Handle this error in the project-specific way");
    let out_f = BufWriter::with_capacity(obs, out_f);

    let i = Input {
        src: in_f,
        ibs,
        output_progress: false,
    };
    let o = Output {
        dst: out_f,
        obs,
        conv_table: None,
    };

    match dd(i, o) {
        Ok((b_in, b_out)) =>
        {
            println!("Completed: Bytes in: {}, Bytes out: {}", b_in, b_out);
           
            RTN_SUCCESS
        },
        Err(_) =>
            RTN_FAILURE,
    }
}

#[cfg(test)]
mod test_dd_internal
{
    #[allow(unused_imports)]
    use super::*;

    use std::io::prelude::*;
    use std::io::BufReader;
    use std::fs;
    use md5::{ Md5, Digest, };
    use hex_literal::hex;

    macro_rules! make_hash_test (
        ( $test_id:ident, $test_name:expr, $src:expr, $exp:expr ) =>
        {
            #[test]
            fn $test_id()
            {
                let tmp_fname = format!("./test-resources/FAILED-{}.test", $test_name);

                let i = Input {
                    src: $src,
                    ibs: 256,
                    output_progress: false,
                };

                let o = Output {
                    dst: File::create(&tmp_fname).unwrap(),
                    obs: 1024,
                    conv_table: None,
                };

                dd(i,o).unwrap();

                let res = {
                    let res = File::open(&tmp_fname).unwrap();
                    let res = BufReader::new(res);

                    let mut h = Md5::new();
                    for b in res.bytes()
                    {
                        h.update([b.unwrap()]);
                    }

                    h.finalize()
                };

                assert_eq!(hex!($exp), res[..]);

                fs::remove_file(&tmp_fname).unwrap();
            }
        };
        ( $test_id:ident, $test_name:expr, $i:expr, $o:expr, $exp:expr ) =>
        {
            #[test]
            fn $test_id()
            {
                let tmp_fname = format!("./test-resources/FAILED-{}.test", $test_name);

                let o = Output {
                    dst: File::create(&tmp_fname).unwrap(),
                    obs: $o.obs,
                    conv_table: $o.conv_table,
                };

                dd($i,o).unwrap();

                let res = {
                    let res = File::open(&tmp_fname).unwrap();
                    let res = BufReader::new(res);

                    let mut h = Md5::new();
                    for b in res.bytes()
                    {
                        h.update([b.unwrap()]);
                    }

                    h.finalize()
                };

                assert_eq!(hex!($exp), res[..]);

                fs::remove_file(&tmp_fname).unwrap();
            }
        };
    );

    macro_rules! make_spec_test (
        ( $test_id:ident, $test_name:expr, $i:expr, $o:expr, $spec:expr ) =>
        {
            #[test]
            fn $test_id()
            {
                let tmp_fname = format!("./test-resources/FAILED-{}.test", $test_name);

                let o = Output {
                    dst: File::create(&tmp_fname).unwrap(),
                    obs: $o.obs,
                    conv_table: $o.conv_table,
                };

                dd($i,o).unwrap();

                let res = File::open(&tmp_fname).unwrap();
                let res = BufReader::new(res);

                let spec = BufReader::new($spec);

                for (b_res, b_spec) in res.bytes().zip(spec.bytes())
                {
                    assert_eq!(b_res.unwrap(),
                               b_spec.unwrap());
                }

                fs::remove_file(&tmp_fname).unwrap();
            }
        };
    );

    make_hash_test!(
        empty_file_test,
        "stdio-empty-file",
        io::empty(),
        "d41d8cd98f00b204e9800998ecf8427e"
    );

    make_hash_test!(
        zeros_4k_test,
        "zeros-4k",
        File::open("./test-resources/zeros-620f0b67a91f7f74151bc5be745b7110.test").unwrap(),
        "620f0b67a91f7f74151bc5be745b7110"
    );

    make_hash_test!(
        ones_4k_test,
        "ones-4k",
        File::open("./test-resources/ones-6ae59e64850377ee5470c854761551ea.test").unwrap(),
        "6ae59e64850377ee5470c854761551ea"
    );

    make_hash_test!(
        deadbeef_32k_test,
        "deadbeef-32k",
        File::open("./test-resources/deadbeef-18d99661a1de1fc9af21b0ec2cd67ba3.test").unwrap(),
        "18d99661a1de1fc9af21b0ec2cd67ba3"
    );

    make_hash_test!(
        random_73k_test,
        "random-73k",
        File::open("./test-resources/random-5828891cb1230748e146f34223bbd3b5.test").unwrap(),
        "5828891cb1230748e146f34223bbd3b5"
    );

    make_spec_test!(
        atoe_conv_spec_test,
        "atoe-conv-spec-test",
        Input {
            src: File::open("./test-resources/seq-byte-values-b632a992d3aed5d8d1a59cc5a5a455ba.test").unwrap(),
            ibs: 512,
            output_progress: false,
        },
        Output {
            dst: Vec::new(), // unused!
            obs: 512,
            conv_table: Some(ascii_to_ebcdic),
        },
        File::open("./test-resources/gnudd-conv-atoe-seq-byte-values.spec").unwrap()
    );

    make_spec_test!(
        etoa_conv_spec_test,
        "etoa-conv-spec-test",
        Input {
            src: File::open("./test-resources/seq-byte-values-b632a992d3aed5d8d1a59cc5a5a455ba.test").unwrap(),
            ibs: 512,
            output_progress: false,
        },
        Output {
            dst: Vec::new(), // unused!
            obs: 512,
            conv_table: Some(ebcdic_to_ascii),
        },
        File::open("./test-resources/gnudd-conv-etoa-seq-byte-values.spec").unwrap()
    );

    make_spec_test!(
        atoibm_conv_spec_test,
        "atoibm-conv-spec-test",
        Input {
            src: File::open("./test-resources/seq-byte-values-b632a992d3aed5d8d1a59cc5a5a455ba.test").unwrap(),
            ibs: 512,
            output_progress: false,
        },
        Output {
            dst: Vec::new(), // unused!
            obs: 512,
            conv_table: Some(ascii_to_ibm),
        },
        File::open("./test-resources/gnudd-conv-atoibm-seq-byte-values.spec").unwrap()
    );

    make_spec_test!(
        lcase_ascii_to_ucase_ascii,
        "lcase_ascii_to_ucase_ascii",
        Input {
            src: File::open("./test-resources/lcase-ascii.test").unwrap(),
            ibs: 512,
            output_progress: false,
        },
        Output {
            dst: Vec::new(), // unused!
            obs: 512,
            conv_table: Some(lcase_to_ucase),
        },
        File::open("./test-resources/ucase-ascii.test").unwrap()
    );

    make_spec_test!(
        ucase_ascii_to_lcase_ascii,
        "ucase_ascii_to_lcase_ascii",
        Input {
            src: File::open("./test-resources/ucase-ascii.test").unwrap(),
            ibs: 512,
            output_progress: false,
        },
        Output {
            dst: Vec::new(), // unused!
            obs: 512,
            conv_table: Some(ucase_to_lcase),
        },
        File::open("./test-resources/lcase-ascii.test").unwrap()
    );

    #[test]
    fn all_valid_ascii_ebcdic_ascii_roundtrip_conv_test()
    {
        // ASCII->EBCDIC
        let test_name = "all-valid-ascii-to-ebcdic";
        let tmp_fname_ae = format!("./test-resources/FAILED-{}.test", test_name);

        let i = Input {
            src: File::open("./test-resources/all-valid-ascii-chars-37eff01866ba3f538421b30b7cbefcac.test").unwrap(),
            ibs: 256,
            output_progress: false,
        };

        let o = Output {
            dst: File::create(&tmp_fname_ae).unwrap(),
            obs: 1024,
            conv_table: Some(ascii_to_ebcdic),
        };

        dd(i,o).unwrap();

        // EBCDIC->ASCII
        let test_name = "all-valid-ebcdic-to-ascii";
        let tmp_fname_ea = format!("./test-resources/FAILED-{}.test", test_name);

        let i = Input {
            src: File::open(&tmp_fname_ae).unwrap(),
            ibs: 256,
            output_progress: false,
        };

        let o = Output {
            dst: File::create(&tmp_fname_ea).unwrap(),
            obs: 1024,
            conv_table: Some(ebcdic_to_ascii),
        };

        dd(i,o).unwrap();

        let res = {
            let res = File::open(&tmp_fname_ea).unwrap();
            let res = BufReader::new(res);

            let mut h = Md5::new();
            for b in res.bytes()
            {
                h.update([b.unwrap()]);
            }

            h.finalize()
        };

        assert_eq!(hex!("37eff01866ba3f538421b30b7cbefcac"), res[..]);

        fs::remove_file(&tmp_fname_ae).unwrap();
        fs::remove_file(&tmp_fname_ea).unwrap();
    }

    //use rand::prelude::*;
    //#[test]
    //fn make_test_data()
    //{
    //    let mut f = File::create("./test-resources/random-walk-through-the-ascii-ranged-forest.test").unwrap();
    //    // let mut rng = rand::thread_rng();

    //    for _ in 0..65536 {
    //        f.write(&[c]).unwrap();
    //    }
    //}


}
